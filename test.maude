*** Mandrescu Mihai, 242

*** The theory.
*** Define a structure for a generic operation #.

fth TRIV# is

including TRIV .

    op #_ : Elt -> Elt .

endfth

*** The module.
*** Design a list module that includes the operation # and
*** define the way # acts on the list.

fmod LIST#{X :: TRIV#} is

    sort List{X} .

    subsort X$Elt < List{X} .

    op nil : -> List{X} .

    op _ _ : List{X} List{X} -> List{X} [assoc id: nil] .

    op apply# : List{X} -> List{X} .

    var I : X$Elt . var L : List{X} .

    eq apply#(nil) = nil .

    eq apply#(I L) = (# I) apply#(L) .

endfm

*** The view.
*** Define the behavior of # for Integers.

view MyInt# from TRIV# to INT is

    sort Elt to Int .

    op #_ to -_ .

    endv

    fmod LIST#-INT is

    protecting LIST#{MyInt#} .

endfm


